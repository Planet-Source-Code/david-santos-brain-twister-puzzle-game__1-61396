Brain Twister
============================

"That Incredibly Addictive Game!.. when you 
     have nothing to do between classes... Kupo!" 
				
					-Mog

Implementation
============================
We need to fire up that DirectX7 2D Engine again....
As such, B-Twist comprises of four puzzle pieces that can be arranged
to form a variety of shapes.

The program must be able to handle rotation and flipping of the pieces.

RotAngle
FlipX
FlipY

Now its not just physical placement on screen. we must have a virtual representation
of each piece, and pieces must snap in order for them to be logically correct.

Snapping will occur within 10 pixels, and objects should snap at correct angle 
and orientation.

Pieces must only snap if their visible areas do not overlap, and only if two or more points
coincide.

Each snapping point is given an identifier e.g. 

piece 1 has 4 corners and 4 midpoints.

1a 1b 1c 1d 1e 1f 1g 1h

the solution for puzzle b-7 would be:

1e-3g
1f-3f-4f
1g-4d
2c-3b
3c-4a
3d-4g

The program will keep a list of snapping point coordinates for each object.
Whenever the user releases the mouse button a search will run through each
object and see if any points coincide, building a list as it does so.
A 10 pixel error margin (quite large actually) will be allowed.

As a result, piece 4 will not be checked per se for overlapping points
as it should have been included in all previous searches.

A loop runs through each point on an object, and for each point a loop will
run on each point on another object, checking for overlaps.

Once a point on one object coincides with the point on another object, the list is updated, 
the 2nd loop exits, and the next object is searched. 

The program must check from the lowest numbered piece to the highest
to build a consistent list that can be compared to a database of
possible soultions. All possible solutions must have been pre-generated.

We can either use sprites or polygons, either way the endpoints
must be calculated relative to the center of the object using
standard trigonometry.

(Using regions for hit testing and polygon filling. Sweet.)

Adding more points to each piece to get the two-or-more-points-touch rule so that
the user needs to have the pieces aligned in order to get the puzzle right.

----------------------------
Potential problems

1 & 2 mirror - occurs when 1 & 2 align laterally, and the resulting rhombus can be flipped
               and still produce the same puzzle

3 & 4 mirror - occurs when 3 & 4 align laterally, and the resulting rhombus can be flipped
               and still produce the same puzzle


1 & 4 mirror - occurs when 1 & 4 are aligned laterally and the resulting trapezoid can be
               flipped and still produce the same puzzle

19 - is it a valid puzzle? no solutiun yet.

5 and 9 checked for more variations on solutions
3 added two solutions (3 & 4 mirror)


This is based on the puzzle game of the same name, which they sell in National Bookstore here in the Philippines.

If you happen to be the distributor, please do not sue.


A-18
